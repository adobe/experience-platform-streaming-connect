/*
 * Copyright 2019 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin:6.1.0'
  }
}

plugins {
  id 'project-report'
  id 'java'
  id 'idea'
  id 'checkstyle'
  id 'jacoco'
  id 'org.sonarqube' version '2.6.2'
  id 'org.ajoberstar.grgit' version '2.2.1-rc.2'
}

description 'Adobe Experience Platform Streaming Connect'

repositories {
  jcenter()
  mavenCentral()
}

def connectProperties = [
  title              : 'Adobe Experience Platform Sink Connector',
  componentName      : 'streaming-connect-sink',
  documentationUrl   : 'https://github.com/adobe/experience-platform-streaming-connect',
  sourceUrl          : 'https://github.com/adobe/experience-platform-streaming-connect',
  description        : 'Adobe Experience Platform Stream connector is based on Kafka Connect. Use this library to stream JSON events from Kafka topics in your datacenter directly into a Adobe Experience Platform in real-time.',
  logo               : 'assets/adobe.png',
  version            : System.getenv("PROJECT_VERSION") ?: "${versionMain}${versionQualifier}",
  ownerUsername      : 'adobeinc',
  ownerName          : 'Adobe Inc.',
  ownerLogo          : 'assets/adobe.png',
  componentType      : 'sink',
  tags               : ['"Adobe"', '"Kafka Connect"', '"Sink"'],
  supportProviderName: 'Adobe Inc.',
  supportUrl         : 'https://github.com/adobe/experience-platform-streaming-connect/issues',
  supportLogo        : 'assets/adobe.png',
  supportSummary     : 'Please file issues, suggest changes or feature requests and question at  https://github.com/adobe/experience-platform-streaming-connect/issues'
]

subprojects {
  apply plugin: 'project-report'
  apply plugin: 'base'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.johnrengelman.shadow'
  apply plugin: 'java'
  apply plugin: 'maven-publish'
  apply plugin: 'idea'
  apply plugin: 'jacoco'

  version = connectProperties.version

  checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties 'checkstyle.header.file': file('../config/checkstyle/adobe.header.txt')
    maxWarnings = 0
    toolVersion '8.10.1'
  }

  var compileJavaVersion = System.getenv("JAVA_COMPILATION_VERSION") == null ? (JavaVersion.current().getMajorVersion() == "" ? "11" :
    JavaVersion.current().getMajorVersion()) : System.getenv("JAVA_COMPILATION_VERSION")

  ext {
    branchName = System.getenv("BRANCHNAME") ?: grgit.branch.current().getName()
    compileVersion = compileJavaVersion + (JavaVersion.toVersion(compileJavaVersion) <= JavaVersion.VERSION_1_8 ? "-deprecated" : "")
  }

  java {
    toolchain {
      languageVersion.set(JavaLanguageVersion.of(JavaVersion.toVersion(compileJavaVersion).getMajorVersion()))
    }
  }

  repositories {
    jcenter()
    mavenCentral()

    publishing {
      repositories {
        maven {
          url "https://artifactory.corp.adobe.com/artifactory/maven-experienceplatform-release"
          credentials {
            username = "${param_artifactory_user}" == "" ? System.getenv("ARTIFACTORY_USER") : "${param_artifactory_user}"
            password = "${param_artifactory_api_token}" == "" ? System.getenv("ARTIFACTORY_API_TOKEN") : "${param_artifactory_api_token}"
          }
        }
      }

      publications {
        maven(MavenPublication) {
          groupId = 'com.adobe.platform.streaming'
          version = "${version}"
          from components.java
        }
      }
    }
  }

  compileTestJava {
    options.deprecation = true
  }

  task listAllDependencies(type: DependencyReportTask) {}

  tasks.withType(Test) {
    useJUnitPlatform()

    reports.html.enabled = false

    beforeTest { descriptor ->
      logger.lifecycle("Running test: " + descriptor)
    }
  }

  jacoco {
    toolVersion = "0.8.6"
  }

  jacocoTestReport {
    getAdditionalSourceDirs().setFrom(sourceSets.main.allSource.srcDirs)
    getSourceDirectories().setFrom(sourceSets.main.allSource.srcDirs)
    getClassDirectories().setFrom(sourceSets.main.output)

    reports {
      xml.enabled = true
      csv.enabled = false
      html.enabled = true
    }
  }

  test.onlyIf { !project.hasProperty('mySkipTests') }

  task unitTest(type: Test) {
    exclude '**/*IUTest.class'
  }

  task integrationTest(type: Test) {
    include '**/*IUTest.class'
  }
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = subprojects.test
  getAdditionalSourceDirs().setFrom(subprojects.sourceSets.main.allSource.srcDirs)
  getSourceDirectories().setFrom(subprojects.sourceSets.main.allSource.srcDirs)
  getClassDirectories().setFrom(subprojects.sourceSets.main.output)
  getExecutionData().setFrom(subprojects.jacocoTestReport.executionData)

  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }
  onlyIf = {
    true
  }
  doFirst {
    getExecutionData().setFrom(executionData.findAll {
      it.exists()
    })
  }
}

jar.enabled = false

ext {
  branchName = System.getenv("BRANCHNAME") ?: grgit.branch.current().getName()
}

sonarqube {
  properties {
    // Sonar server settings
    property 'sonar.host.url', 'http://mcdpv2.sonar.corp.adobe.com:9000/'
    property 'sonar.login', System.getenv('SONARQUBE_ACCESS_TOKEN')

    // project identity & general info
    property 'sonar.projectKey', "com.adobe.platform.streaming:experience-platform-streaming-connect:$branchName"
    property 'sonar.projectName', "Adobe Experience Platform Streaming Connect :: $branchName"
    property 'sonar.projectDescription', "Adobe Experience Platform Streaming Connect (branch: $branchName)"
    property 'sonar.links.homepage', 'https://git.corp.adobe.com/experience-platform/experience-platform-streaming-connect'
    property 'sonar.links.ci', 'https://pipeline.ci.corp.adobe.com/view/CICD/job/experience-platform-streaming-connect-pr-build'
    property 'sonar.links.issue', 'https://jira.corp.adobe.com/secure/RapidBoard.jspa?rapidView=23428&view=planning.nodetail'
    property 'sonar.links.scm', 'https://git.corp.adobe.com/experience-platform/experience-platform-streaming-connect'
    property 'sonar.java.coveragePlugin', 'jacoco'
    property 'sonar.jacoco.reportPaths', "$buildDir/jacoco/test.exec"
    property 'sonar.verbose', 'true'
    property 'sonar.sourceEncoding', 'UTF-8'
  }
}

def basePackage = "build/package"

task copyDependencies(type: Copy) {
  from subprojects.configurations.default
  into "$basePackage/lib"

  from "streaming-connect-sink/build/libs/streaming-connect-sink-${connectProperties.version}.jar"
  into "$basePackage/lib"

  doLast {
    delete fileTree('streaming-connect-sink/build/libs/') {
      include "streaming-connect-sink-${connectProperties.version}.jar"
    }
    copy {
      from projectDir.getAbsolutePath() + "/doc/resources/adobe.png"
      into "$basePackage/assets"
    }

    copy {
      from projectDir.getAbsolutePath() + "/LICENSE"
      into "$basePackage/doc"
    }

    copy {
      from projectDir.getAbsolutePath() + "/README.md"
      into "$basePackage/doc"
    }

    new File(projectDir, "/$basePackage/manifest.json").text = """{
  "component_types": [ "$connectProperties.componentType" ],
  "description": "$connectProperties.description",
  "docker_image": {
    "tag": "$connectProperties.version",
    "name": "experience-platform-streaming-connect",
    "namespace": "adobe",
    "registry": ["ghcr.io"]
  },
  "documentation_url": "$connectProperties.documentationUrl",
  "features": {
    "confluent_control_center_integration": true,
    "delivery_guarantee": [ "at_least_once"],
    "kafka_connect_api": true,
    "single_message_transforms": true,
    "supported_encodings": [ "json" ]
  },
  "license": [
    {
      "name": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0",
      "logo": "assets/apache_logo.png"
    }
  ],
  "logo": "$connectProperties.logo",
  "name": "$connectProperties.componentName",
  "owner": {
    "logo": "$connectProperties.ownerLogo",
    "name": "$connectProperties.ownerName",
    "type": "organization",
    "username": "$connectProperties.ownerUsername"
  },
  "requirements": [ "AEP Platform Account" ],
  "support": {
    "logo": "$connectProperties.supportLogo",
    "provider_name": "$connectProperties.supportProviderName",
    "summary": "$connectProperties.supportSummary",
    "url": "$connectProperties.supportUrl"
  },
  "tags": $connectProperties.tags,
  "title": "$connectProperties.title",
  "version": "$connectProperties.version"
}
  """
  }

}

task kafkaConnectPublish(type: Zip) {
  dependsOn(copyDependencies)

  archiveName "$connectProperties.ownerUsername-$connectProperties.componentName-$connectProperties.version" + ".zip"
  from "$basePackage/"
  include '*'
  include '*/*'
}

configurations.all {
  exclude module: 'slf4j-log4j12'
}
